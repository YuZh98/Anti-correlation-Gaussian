trace_theta <- model$beta[,-1]
if (niter>15000) trace_theta = trace_theta[10000:nrow(trace_theta),]
trace_sig2 <- model$sigma^2
cat("The total running time for the SSVS is ", Tol_time, " seconds.\n")
theta_post_mean = colMeans(trace_theta)
N_tol <- nrow(trace_theta)
### MSE
MSE = mean((theta_post_mean-theta0)^2)
### Plots
## Estimation of theta
par(mfrow=c(1,1))
plot(theta0, ylab=expression(theta))
points(theta_post_mean, col="red")
#points(colMeans(trace_theta), col="red")
#points(trace_theta[m,], col="blue")
legend("topright", legend=c("True theta", "Posterior mean"), col=c("black", "red"), pch=1, cex=1)
## boxplot
if (p==10){
boxplot(trace_theta, outline=F)
points(theta0, col="red", pch=19)
} else{
boxplot(trace_theta[,1:50], outline=F)
points(theta0[1:50], col="red", pch=19)
}
## Trace plot of theta
index_to_plot <- c(1:16)
par(mfrow=c(4,4))
for (i in index_to_plot){
plot(1:nrow(trace_theta), trace_theta[,i], "l", main=i)
abline(h=theta0[i], col="red")
}
## Trace plot of sig2
par(mfrow=c(1,1))
plot(1:length(trace_sig2), trace_sig2, "l", main="sig2")
print(MSE)
# print(False_Rate(trace_theta, c(rep(1,10), rep(0,p-10))))
### Draw boxplot of ACF
df.ACF = data.frame()
lag.max = 40
for (i in 1:10){
ACF = acf(trace_theta[,i], lag.max = lag.max, plot=F)
df.new = data.frame(LAGS=0:(lag.max), acf=ACF$acf[,1,1])
df.ACF = rbind(df.ACF, df.new)
}
ggplot(df.ACF, aes(x=factor(LAGS), y=acf)) + geom_boxplot(outlier.shape = NA) +
theme_classic() +
theme(axis.text.x=element_text(size=25), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = lag.max, by = 5)) +
labs(x='', y='')
df.trace = data.frame(index=rep(1:30, rep(nrow(trace_theta), 30)), values=c(trace_theta[,1:30]))
df.theta0 = data.frame(index=1:30, values=theta0[1:30])
ggplot(df.trace, aes(x=factor(index), y=values)) +
geom_boxplot(outlier.shape = NA) +  # This will hide the outliers in the boxplot
geom_point(data = df.theta0, aes(x=factor(index), y=values), size = 5, color = "blue") +  # Ensure data is specified correctly
theme_classic() +
theme(axis.text.x=element_text(size=35), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = 30, by = 5)) +  # Adjusted 'to' according to your 'index'
labs(x='', y='')
library(BoomSpikeSlab)
##### An example from the manual of BoomSpikeSlab #####
# n <- 100
# p <- 10
# ngood <- 3
# niter <- 1000
# sigma <- .8
# x <- cbind(1, matrix(rnorm(n * (p-1)), nrow=n))
#
# beta <- c(1,-1,0.5, rep(0, p - ngood))
# y <- rnorm(n, x %*% beta, sigma)
# x <- x[,-1]
# model <- lm.spike(y ~ x, niter=niter)
# plot.ts(model$beta)
# hist(model$sigma) ## should be near 8 plot(model) summary(model) plot(model, "residuals")
#
#
# ## Now replace the first observation with a big outlier.
# y[1] <- 50
# model <- lm.spike(y ~ x, niter = niter)
# model2 <- lm.spike(y ~ x, niter = niter, error.distribution = "student")
# pred <- predict(model, newdata = x)
# pred2 <- predict(model2, newdata = x)
#
# ## Maximize the plot window before making these box plots. They show
# ## the posterior predictive distribution of all 100 data points, so
# ## make sure your screen is 100 boxes wide!
# par(mfrow = c(2,1))
# BoxplotTrue(t(pred), truth = y, ylim = range(pred), pch = ".", main = "Posterior predictive distribution assuming Gaussian errors.")
# BoxplotTrue(t(pred2), truth = y, ylim = range(pred), pch = ",", main = "Posterior predictive distribution assuming Student errors.")
#
# ## The posterior predictive distributions are much tighter in the
# ## student case than in the Gaussian case, even though the student
# ## model has heavier tails, because the "sigma" parameter is smaller.
# par(mfrow = c(1,1))
# CompareDensities(list(gaussian = model$sigma, student = model2$sigma), xlab = "sigma")
##### Our simulation #####
try <- 1
n <- 300#as.numeric(args[4])
p <- 50#as.numeric(args[3])
d0 <- 10 # The number of non-zero entries
rho0 <- 0.9 # The correlation of Sigma when x_i\sim N(0,Sigma)
sig2_0 <- 1 # True error variance
c0 <- 4#as.numeric(args[2]) # The coefficient for |beta_j|
### Initial values
sig20 <- 1
tau0 <- rep(0.5, p)
### Prior parameters
lam_K0 <- 1#rep(0.5, p)
a <- rep(5, p)
b <- rep(1, p)
c <- 1
dd <- 1
### Data Generation
X <- matrix(rnorm(n*p),n)
X0 <- matrix(rnorm(n*p),n)
cord <- c(1:p)
dist <- abs(outer(cord,cord,"-"))
Cor <- (rho0**dist)
X <- X0%*%(chol(Cor))
#X <- t(t(X)/sqrt(diag(t(X)%*%X)))
set.seed(2303+try)
theta0 <- rep(0, p)
theta0[1:d0] <- c0 * sqrt(sig2_0*log(p)/n) * c(2,-3,2,2,-3,3,-2,3,-2,3) # Ground truth
y0 <- X%*%theta0
y <- sqrt(sig2_0)*rnorm(n) + X%*%theta0
niter <- 20000
Tol_time <- system.time(model <- lm.spike(y ~ X, niter=niter))[3]
trace_theta <- model$beta[,-1]
if (niter>15000) trace_theta = trace_theta[10000:nrow(trace_theta),]
trace_sig2 <- model$sigma^2
cat("The total running time for the SSVS is ", Tol_time, " seconds.\n")
theta_post_mean = colMeans(trace_theta)
N_tol <- nrow(trace_theta)
### MSE
MSE = mean((theta_post_mean-theta0)^2)
### Plots
## Estimation of theta
par(mfrow=c(1,1))
plot(theta0, ylab=expression(theta))
points(theta_post_mean, col="red")
#points(colMeans(trace_theta), col="red")
#points(trace_theta[m,], col="blue")
legend("topright", legend=c("True theta", "Posterior mean"), col=c("black", "red"), pch=1, cex=1)
## boxplot
if (p==10){
boxplot(trace_theta, outline=F)
points(theta0, col="red", pch=19)
} else{
boxplot(trace_theta[,1:50], outline=F)
points(theta0[1:50], col="red", pch=19)
}
## Trace plot of theta
index_to_plot <- c(1:16)
par(mfrow=c(4,4))
for (i in index_to_plot){
plot(1:nrow(trace_theta), trace_theta[,i], "l", main=i)
abline(h=theta0[i], col="red")
}
## Trace plot of sig2
par(mfrow=c(1,1))
plot(1:length(trace_sig2), trace_sig2, "l", main="sig2")
print(MSE)
# print(False_Rate(trace_theta, c(rep(1,10), rep(0,p-10))))
### Draw boxplot of ACF
df.ACF = data.frame()
lag.max = 40
for (i in 1:10){
ACF = acf(trace_theta[,i], lag.max = lag.max, plot=F)
df.new = data.frame(LAGS=0:(lag.max), acf=ACF$acf[,1,1])
df.ACF = rbind(df.ACF, df.new)
}
ggplot(df.ACF, aes(x=factor(LAGS), y=acf)) + geom_boxplot(outlier.shape = NA) +
theme_classic() +
theme(axis.text.x=element_text(size=25), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = lag.max, by = 5)) +
labs(x='', y='')
df.trace = data.frame(index=rep(1:30, rep(nrow(trace_theta), 30)), values=c(trace_theta[,1:30]))
df.theta0 = data.frame(index=1:30, values=theta0[1:30])
ggplot(df.trace, aes(x=factor(index), y=values)) +
geom_boxplot(outlier.shape = NA) +  # This will hide the outliers in the boxplot
geom_point(data = df.theta0, aes(x=factor(index), y=values), size = 5, color = "blue") +  # Ensure data is specified correctly
theme_classic() +
theme(axis.text.x=element_text(size=35), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = 30, by = 5)) +  # Adjusted 'to' according to your 'index'
labs(x='', y='')
library(BoomSpikeSlab)
##### An example from the manual of BoomSpikeSlab #####
# n <- 100
# p <- 10
# ngood <- 3
# niter <- 1000
# sigma <- .8
# x <- cbind(1, matrix(rnorm(n * (p-1)), nrow=n))
#
# beta <- c(1,-1,0.5, rep(0, p - ngood))
# y <- rnorm(n, x %*% beta, sigma)
# x <- x[,-1]
# model <- lm.spike(y ~ x, niter=niter)
# plot.ts(model$beta)
# hist(model$sigma) ## should be near 8 plot(model) summary(model) plot(model, "residuals")
#
#
# ## Now replace the first observation with a big outlier.
# y[1] <- 50
# model <- lm.spike(y ~ x, niter = niter)
# model2 <- lm.spike(y ~ x, niter = niter, error.distribution = "student")
# pred <- predict(model, newdata = x)
# pred2 <- predict(model2, newdata = x)
#
# ## Maximize the plot window before making these box plots. They show
# ## the posterior predictive distribution of all 100 data points, so
# ## make sure your screen is 100 boxes wide!
# par(mfrow = c(2,1))
# BoxplotTrue(t(pred), truth = y, ylim = range(pred), pch = ".", main = "Posterior predictive distribution assuming Gaussian errors.")
# BoxplotTrue(t(pred2), truth = y, ylim = range(pred), pch = ",", main = "Posterior predictive distribution assuming Student errors.")
#
# ## The posterior predictive distributions are much tighter in the
# ## student case than in the Gaussian case, even though the student
# ## model has heavier tails, because the "sigma" parameter is smaller.
# par(mfrow = c(1,1))
# CompareDensities(list(gaussian = model$sigma, student = model2$sigma), xlab = "sigma")
##### Our simulation #####
try <- 1
n <- 300#as.numeric(args[4])
p <- 50#as.numeric(args[3])
d0 <- 10 # The number of non-zero entries
rho0 <- 0.9 # The correlation of Sigma when x_i\sim N(0,Sigma)
sig2_0 <- 1 # True error variance
c0 <- 5#as.numeric(args[2]) # The coefficient for |beta_j|
### Initial values
sig20 <- 1
tau0 <- rep(0.5, p)
### Prior parameters
lam_K0 <- 1#rep(0.5, p)
a <- rep(5, p)
b <- rep(1, p)
c <- 1
dd <- 1
### Data Generation
X <- matrix(rnorm(n*p),n)
X0 <- matrix(rnorm(n*p),n)
cord <- c(1:p)
dist <- abs(outer(cord,cord,"-"))
Cor <- (rho0**dist)
X <- X0%*%(chol(Cor))
#X <- t(t(X)/sqrt(diag(t(X)%*%X)))
set.seed(2303+try)
theta0 <- rep(0, p)
theta0[1:d0] <- c0 * sqrt(sig2_0*log(p)/n) * c(2,-3,2,2,-3,3,-2,3,-2,3) # Ground truth
y0 <- X%*%theta0
y <- sqrt(sig2_0)*rnorm(n) + X%*%theta0
niter <- 20000
Tol_time <- system.time(model <- lm.spike(y ~ X, niter=niter))[3]
trace_theta <- model$beta[,-1]
if (niter>15000) trace_theta = trace_theta[10000:nrow(trace_theta),]
trace_sig2 <- model$sigma^2
cat("The total running time for the SSVS is ", Tol_time, " seconds.\n")
theta_post_mean = colMeans(trace_theta)
N_tol <- nrow(trace_theta)
### MSE
MSE = mean((theta_post_mean-theta0)^2)
### Plots
## Estimation of theta
par(mfrow=c(1,1))
plot(theta0, ylab=expression(theta))
points(theta_post_mean, col="red")
#points(colMeans(trace_theta), col="red")
#points(trace_theta[m,], col="blue")
legend("topright", legend=c("True theta", "Posterior mean"), col=c("black", "red"), pch=1, cex=1)
## boxplot
if (p==10){
boxplot(trace_theta, outline=F)
points(theta0, col="red", pch=19)
} else{
boxplot(trace_theta[,1:50], outline=F)
points(theta0[1:50], col="red", pch=19)
}
## Trace plot of theta
index_to_plot <- c(1:16)
par(mfrow=c(4,4))
for (i in index_to_plot){
plot(1:nrow(trace_theta), trace_theta[,i], "l", main=i)
abline(h=theta0[i], col="red")
}
## Trace plot of sig2
par(mfrow=c(1,1))
plot(1:length(trace_sig2), trace_sig2, "l", main="sig2")
print(MSE)
# print(False_Rate(trace_theta, c(rep(1,10), rep(0,p-10))))
### Draw boxplot of ACF
df.ACF = data.frame()
lag.max = 40
for (i in 1:10){
ACF = acf(trace_theta[,i], lag.max = lag.max, plot=F)
df.new = data.frame(LAGS=0:(lag.max), acf=ACF$acf[,1,1])
df.ACF = rbind(df.ACF, df.new)
}
ggplot(df.ACF, aes(x=factor(LAGS), y=acf)) + geom_boxplot(outlier.shape = NA) +
theme_classic() +
theme(axis.text.x=element_text(size=25), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = lag.max, by = 5)) +
labs(x='', y='')
df.trace = data.frame(index=rep(1:30, rep(nrow(trace_theta), 30)), values=c(trace_theta[,1:30]))
df.theta0 = data.frame(index=1:30, values=theta0[1:30])
ggplot(df.trace, aes(x=factor(index), y=values)) +
geom_boxplot(outlier.shape = NA) +  # This will hide the outliers in the boxplot
geom_point(data = df.theta0, aes(x=factor(index), y=values), size = 5, color = "blue") +  # Ensure data is specified correctly
theme_classic() +
theme(axis.text.x=element_text(size=35), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = 30, by = 5)) +  # Adjusted 'to' according to your 'index'
labs(x='', y='')
library(BoomSpikeSlab)
##### An example from the manual of BoomSpikeSlab #####
# n <- 100
# p <- 10
# ngood <- 3
# niter <- 1000
# sigma <- .8
# x <- cbind(1, matrix(rnorm(n * (p-1)), nrow=n))
#
# beta <- c(1,-1,0.5, rep(0, p - ngood))
# y <- rnorm(n, x %*% beta, sigma)
# x <- x[,-1]
# model <- lm.spike(y ~ x, niter=niter)
# plot.ts(model$beta)
# hist(model$sigma) ## should be near 8 plot(model) summary(model) plot(model, "residuals")
#
#
# ## Now replace the first observation with a big outlier.
# y[1] <- 50
# model <- lm.spike(y ~ x, niter = niter)
# model2 <- lm.spike(y ~ x, niter = niter, error.distribution = "student")
# pred <- predict(model, newdata = x)
# pred2 <- predict(model2, newdata = x)
#
# ## Maximize the plot window before making these box plots. They show
# ## the posterior predictive distribution of all 100 data points, so
# ## make sure your screen is 100 boxes wide!
# par(mfrow = c(2,1))
# BoxplotTrue(t(pred), truth = y, ylim = range(pred), pch = ".", main = "Posterior predictive distribution assuming Gaussian errors.")
# BoxplotTrue(t(pred2), truth = y, ylim = range(pred), pch = ",", main = "Posterior predictive distribution assuming Student errors.")
#
# ## The posterior predictive distributions are much tighter in the
# ## student case than in the Gaussian case, even though the student
# ## model has heavier tails, because the "sigma" parameter is smaller.
# par(mfrow = c(1,1))
# CompareDensities(list(gaussian = model$sigma, student = model2$sigma), xlab = "sigma")
##### Our simulation #####
try <- 1
n <- 300#as.numeric(args[4])
p <- 50#as.numeric(args[3])
d0 <- 10 # The number of non-zero entries
rho0 <- 0.9 # The correlation of Sigma when x_i\sim N(0,Sigma)
sig2_0 <- 1 # True error variance
c0 <- 3#as.numeric(args[2]) # The coefficient for |beta_j|
### Initial values
sig20 <- 1
tau0 <- rep(0.5, p)
### Prior parameters
lam_K0 <- 1#rep(0.5, p)
a <- rep(5, p)
b <- rep(1, p)
c <- 1
dd <- 1
### Data Generation
X <- matrix(rnorm(n*p),n)
X0 <- matrix(rnorm(n*p),n)
cord <- c(1:p)
dist <- abs(outer(cord,cord,"-"))
Cor <- (rho0**dist)
X <- X0%*%(chol(Cor))
#X <- t(t(X)/sqrt(diag(t(X)%*%X)))
set.seed(2303+try)
theta0 <- rep(0, p)
theta0[1:d0] <- c0 * sqrt(sig2_0*log(p)/n) * c(2,-3,2,2,-3,3,-2,3,-2,3) # Ground truth
y0 <- X%*%theta0
y <- sqrt(sig2_0)*rnorm(n) + X%*%theta0
niter <- 20000
Tol_time <- system.time(model <- lm.spike(y ~ X, niter=niter))[3]
trace_theta <- model$beta[,-1]
if (niter>15000) trace_theta = trace_theta[10000:nrow(trace_theta),]
trace_sig2 <- model$sigma^2
cat("The total running time for the SSVS is ", Tol_time, " seconds.\n")
theta_post_mean = colMeans(trace_theta)
N_tol <- nrow(trace_theta)
### MSE
MSE = mean((theta_post_mean-theta0)^2)
### Plots
## Estimation of theta
par(mfrow=c(1,1))
plot(theta0, ylab=expression(theta))
points(theta_post_mean, col="red")
#points(colMeans(trace_theta), col="red")
#points(trace_theta[m,], col="blue")
legend("topright", legend=c("True theta", "Posterior mean"), col=c("black", "red"), pch=1, cex=1)
## boxplot
if (p==10){
boxplot(trace_theta, outline=F)
points(theta0, col="red", pch=19)
} else{
boxplot(trace_theta[,1:50], outline=F)
points(theta0[1:50], col="red", pch=19)
}
## Trace plot of theta
index_to_plot <- c(1:16)
par(mfrow=c(4,4))
for (i in index_to_plot){
plot(1:nrow(trace_theta), trace_theta[,i], "l", main=i)
abline(h=theta0[i], col="red")
}
## Trace plot of sig2
par(mfrow=c(1,1))
plot(1:length(trace_sig2), trace_sig2, "l", main="sig2")
print(MSE)
# print(False_Rate(trace_theta, c(rep(1,10), rep(0,p-10))))
### Draw boxplot of ACF
df.ACF = data.frame()
lag.max = 40
for (i in 1:10){
ACF = acf(trace_theta[,i], lag.max = lag.max, plot=F)
df.new = data.frame(LAGS=0:(lag.max), acf=ACF$acf[,1,1])
df.ACF = rbind(df.ACF, df.new)
}
ggplot(df.ACF, aes(x=factor(LAGS), y=acf)) + geom_boxplot(outlier.shape = NA) +
theme_classic() +
theme(axis.text.x=element_text(size=25), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = lag.max, by = 5)) +
labs(x='', y='')
df.trace = data.frame(index=rep(1:30, rep(nrow(trace_theta), 30)), values=c(trace_theta[,1:30]))
df.theta0 = data.frame(index=1:30, values=theta0[1:30])
ggplot(df.trace, aes(x=factor(index), y=values)) +
geom_boxplot(outlier.shape = NA) +  # This will hide the outliers in the boxplot
geom_point(data = df.theta0, aes(x=factor(index), y=values), size = 5, color = "blue") +  # Ensure data is specified correctly
theme_classic() +
theme(axis.text.x=element_text(size=35), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = 30, by = 5)) +  # Adjusted 'to' according to your 'index'
labs(x='', y='')
rm(list=ls())
setwd('/Users/zhengyu/Desktop/UF/Research/Gibbs_Sampler_l1ballprior/repo')
source("SliceSampler.R")
source("SourceCode.R")
require(ggplot2)
n <- 300
p <- 500
d0 <- 10 # The number of non-zero entries
rho0 <- 0.9 # The correlation of x_i and x_j is rho^|i-j|
sig2_0 <- 1 # True error variance
c0 <- 3 # The SNR coefficient for |beta_j|
### Initial values
sig20 <- 1
tau0 <- rep(0.5, p)
### Prior parameters
hyp <- list(lam_K0=1, aa=2, bb=1, cc=1, dd=1)
### Data Generation
set.seed(2304)
X0 <- matrix(rnorm(n*p),n)
cord <- c(1:p)
dist <- abs(outer(cord,cord,"-"))
Cor <- (rho0**dist)
X <- X0%*%(chol(Cor))
theta0 <- rep(0, p)
theta0[1:d0] <- c0 * sqrt(sig2_0*log(p)/n) * c(2,-3,2,2,-3,3,-2,3,-2,3) # Ground truth
y0 <- X%*%theta0
y <- sqrt(sig2_0)*rnorm(n) + X%*%theta0
##### Fit the model
fit <- l1ball.linreg(X, y, sig20=sig20, tau0=tau0, K0=2,
hyp=hyp, theta0=theta0,
w=0.05, m=10,
steps=20000, burnin=10000, thin=1,
init_method = 'predetermined')
cat("The total running time for the Blocked Gibbs sampler is ", fit$running.time, " seconds.\n")
##### Result analysis
### 1. Estimation
par(mfrow=c(1,1))
if (p<50){
boxplot(fit$trace_theta, outline=F)
points(theta0, col="blue", pch=19)
} else{
boxplot(fit$trace_theta[,1:50], outline=F) # Show first 50 variables
points(theta0[1:50], col="blue", pch=19)
}
### 2. Trace plots (assessing mixing)
N_tol <- length(fit$trace_K0)
## Trace plot of kappa
plot(1:N_tol, fit$trace_K0, "l", main="trace plot of kappa")
## Trace plot of theta
index_to_plot <- c(1:16)
par(mfrow=c(4,4))
for (i in index_to_plot){
plot(1:N_tol, fit$trace_theta[,i], "l", main=paste("theta", i))
abline(h=theta0[i], col="red")
}
## Trace plot of sig2
par(mfrow=c(1,1))
plot(1:N_tol, fit$trace_sig2, "l", main="trace plot of sig2")
## Trace plot of tau
par(mfrow=c(4,4))
for (i in index_to_plot){
plot(1:N_tol, fit$trace_tau[,i], "l", main=paste("tau", i))
}
### 3. boxplot of ACF
df.ACF = data.frame()
lag.max = 40
for (i in 1:10){
ACF = acf(fit$trace_theta[,i], lag.max = lag.max, plot=F)
df.new = data.frame(LAGS=0:(lag.max), acf=ACF$acf[,1,1])
df.ACF = rbind(df.ACF, df.new)
}
ggplot(df.ACF, aes(x=factor(LAGS), y=acf)) + geom_boxplot(outlier.shape = NA) +
theme_classic() +
theme(axis.text.x=element_text(size=25), axis.text.y=element_text(size=25)) +
scale_x_discrete(breaks = seq(from = 0, to = lag.max, by = 5)) +
labs(x='', y='')
